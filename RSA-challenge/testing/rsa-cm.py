import gmpy2
from Crypto.Util.number import long_to_bytes
import argparse

class RSAModuli:
    def __init__(self):
        self.a = 0
        self.b = 0
        self.m = 0
        self.i = 0

    def gcd(self, num1, num2):
        """
        This function os used to find the GCD of 2 numbers.
        :param num1:
        :param num2:
        :return:
        """
        if num1 < num2:
            num1, num2 = num2, num1
        while num2 != 0:
            num1, num2 = num2, num1 % num2
        return num1

    def extended_euclidean(self, e1, e2):
        """
        The value a is the modular multiplicative inverse of e1 and e2.
        b is calculated from the eqn: (e1*a) + (e2*b) = gcd(e1, e2)
        :param e1: exponent 1
        :param e2: exponent 2
        """
        self.a = gmpy2.invert(e1, e2)
        self.b = (float(self.gcd(e1, e2)-(self.a*e1)))/float(e2)

    def modular_inverse(self, c1, c2, N):
        """
        i is the modular multiplicative inverse of c2 and N.
        i^-b is equal to c2^b. So if the value of b is -ve, we
        have to find out i and then do i^-b.
        Final plain text is given by m = (c1^a) * (i^-b) %N
        :param c1: cipher text 1
        :param c2: cipher text 2
        :param N: Modulus
        """
        i = gmpy2.invert(c2, N)
        mx = pow(c1, self.a, N)
        my = pow(i, int(-self.b), N)
        self.m= mx * my % N

    def print_value(self):
        print("Flag: ", long_to_bytes(self.m).decode())


def main():
    c = RSAModuli()
    N  = 676238018546139636599968136919951638784169335428252029182298412020758847242206248307018018969063741639726553964624150500306845814609322745254989151666690112182283191639480523438644065220810032111892349239429300514209124665695191106002305405143386942261968660082631616462847484758453958699608731381083638773080254423432207333237896195796089326417786310061938264671682946334920505586565226982855954892865206568265787067044854238113383154540649066916078997194074917270833472597908269219507149973219530738203400033393004654938907918920323542046350835550752265047400015273512722166957695440198094382824180992687132755835287037755775952153687191150677264222993300289459925402867328803633587426471496740746254196327233380038985034237616623131068423100663583158185622284577840697231991044617038529409986341691706615497392532385757159103897094656089974927045280829135115696456624762504691199339269430293057461932133854144014631998166693379002567501769479498100982404011883750619293452463035905562880188087796656288937318985049354409034408656950027359966896291938795413897243429507053128536459208084326078992179510731125800653622361974411795455297316742999064073260619232854822133485575045835924319348137604227889834511102070007395175644250526517766046251105169713496421430677912685335339237264091786485275770343083980713325759128896998656380861759037598914630025253721966839323422230745826855233526822904077422821429970815641525182582637387353691856985607041473795056553443193682212114896443925749177312222750401315347171217031902045968146153311066132109125265418196648036191573055293760890721133958468297989168933612299091847856648150169586019885728708654912206191784246259584605467828392472757686252805101377052193463751135885354466642199094768585369963589830753840590240576057218427338900278046128225046925255360451687557774384233383599300713067201780374405650601393753467858002491773761662560329229514122234863475306555799947994700916132502142701939604208156734717884305590705737056509736168586907378962331147217748096701579152692468043772846919354552467903247013745402305406466021820660427732545456209483991433283520137856580585174478802740747942481452810718786872155430360671127711386402723834101802849771790214901575176573630866134340009675551673319576436133126410757915015260698573207078157075865264440566810974074472177602682382788453593250975463306410674335249391573598329683185779342137705087410590654898799334492779295925510029972938789077118788764168325014735013
    c1 = 230060122315960743588535868664333593575952577342212827002651367337414217709060813698811769934727078402783599177255862717119387424779793638997102280671770140761678703503892245913343287109672656127551873634720915612168838832513369048959378645099735518188473348028801579921683091880159511008060095258176032391712944434344413932413801687115714856503583633603548232140826164332082693454540983879641981359564154826720990789852855059554461017642253388683525795941709838306159230276556262216444471201057381189013306505741774241172050404887707792176095832096244109405103407317636502363080163438506340606075197161099957556009440826152516435611065297444887511681202894062829802224545704521180115028116545291338771478013412211884237193763592178398244570770249228237709618747049584174458197420623770450579644096419448645178455154096969339422413422513236559282303707870932689069238317606624113126355141029818432813894773699174674433497817231249474299096192200790996675241123725076257348031585122313343142133821835421161337841366664419159885014943411311428313781451237359051584186552269980572839524833602866713492335036053944309496423836761859547643340364796914641149326432354334994772258398697454687684385992411735548574389890263267778022709902739942178612151622649638392996395643607115661813795454870799698918379356341489319172942927391746349427335335355786122277372073818600330946764355007042490899650959739782506866562750073353155165608142345512762473337227368743460743745962182916696487145712970076848866959150904795654669986196051864931268418576775171686208803592283260951791700419388528239811068154187934053078173663332659120206576109144891329954269319983255184653205133950301442839323452582165620125429199611934076262322552492148005021972937763037589291352295447172228852814540563161014974176144026419021523456590661829366224642561544349235094155634059477805310232528241189412522262347277891611115279634308109318876702897718129929558847908286747604402545143532413640317592111319954712283639272795128943424660744886040703927347678232510877710679546163472090013211564875439638909580604106766511511002659023883694038045283402881927245655307921420186817832395391240810744002420106547286625556202890368166797298729146243983449162206764380390003584102593275635896331282973412125793051214423959575072047663597627341131571946038898656390828028809955903878410090652283170543678437942566184399174857168800399464038268183852522994683524986061366236098698809044633914054332655482299821
    c2 = 669573453023405234018456171091375859124555473183084459765569738358407211174884716205791752996839626118236272841961841238238792169110396092117309930866294701226287604450725976010931798970374100047028674931690025254159349986953688974180184034951482051040471711233208740245342272053566960330770608369299393210768488253033149627722293879473956591865195299252432738785694781742291381766952617808946761102466409257285284893024511752919866272851470224711040368511319634114347903876549412615010319605956968924077972430367078078735813758256440063768596758979174743599024260815238252236894980178517720457607887464062873709478155101330843157571850535908173541138408504031663989171903423785896393659680747971792465860688537195197787845682921519119333841930734932082986365734776493069756370377904939503811140040060739447808159530121277153133666321599553074548556876518546060146457172164629551559223104517591102661950359491145873278905422313475765483966687470678506714372751383343974432030743141194395679267037786084206479970789491305835669351219501966983622649809601360956740642908100464654122152561532856705457987737592583891170361848731091644307259239576084520558507055013023495909113663299277156684105815281252743614748781010101983169568930998231883262546742945794648947763855487867907630104439522527715403820550189195358367653584766768688928378790827365873469088830984939074429969987740955032041679519455956644200842641263458757588605913116949107793526206584344041111774011072374286414907667692904344378074473252770231388227655780855859680026999999059028714379409517823936804894006098660967298648427094304487721731906914057779047097576187487217183904387481143047075965569291644273428946782277820009354821079886500908201864666686342164760732611674272842473824472601698072895187007053652825911138983516475797678902416609631580572753026629045140766027522800823905303318927965749398265945049753243635472920654749037779635618618479113497977102419587362222032322519503782091881508914817274928727836781389106448081903141619673361511985857594932558875733371868039742683370896713157829237889392808308389916921247429470513825294244895554111423411844626980826392453739555986443224214371887249209578601334904953309634403608090203504039054935057755261522989275783043740852979855090244596144851303945272771783974037070451320814200707255809395195118497586554612990177436184270162199533912836800285063924133251721715819598573056654028488963327570730342132649384177356870088245257249107791818
    e1 = 65537
    e2 = 257
    c.extended_euclidean(e1, e2)
    c.modular_inverse(c1, c2, N)
    c.print_value()

if __name__ == '__main__':
    main()